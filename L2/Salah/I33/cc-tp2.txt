def add(x,y):
    return [(x[0]+y[0]) % 5, (x[1]+y[1])%5]

La fonction ci-dessous a été écrite dans l'exercice 7 du TD2 que nous avions traité dans le cas de F_3.
Ici je noterai a pour alpha. On a donc a qui est une racine du polynome a^2+4a+2, donc a^2+4a+2 = 0. 
Donc a^2 = -4a-2 = a+3 (étant donné que l'on est dans F_5,  on calcule modulo 5)
Un élément x est de la forme a0 + a1*a et est représenté par la liste [a0,a1]
Calculons x*a , x*a = a0*a + a1*a^2 = a0*a + a1*(a+3) (puisque a^2 = a +3)
Donc x*a = 3*a1 + (a0+a1)*a. Attention ceci est une égalité dans F_5^2 donc les additions et multiplications
sont faites modulo 5 en Python. Ainsi l'élément 3*a1 + (a0+a1)*a  est représenté par la liste [3*a1 %5 , (a0+a1) % 5]


def multbyalpha(x):
    return [3*x[1] % 5, (x[0]+x[1])%5]

On a x = a0+a1*a et y = b0+b1*a, donc x*y = (a0+a1*a)*(b0+b1*a)
= a0*b0 + a0*b1*a + a1*b0*a + a1*b1*a^2
= a0*b0 + (a0*b1+a1*b0)*a + a1*b1*(a+3)
= a0*b0+3*a1*b1+ (a0*b1+a1*b0 + a1*b1)*a

élément qui en Pyton sera réprésenté par la liste [(a0*b0+3*a1*b1) % 5, (a0*b1+a1*b0 + a1*b1) % 5]

def mult(x,y):
    return [(x[0]*y[0]+3*x[1]*y[1]) % 5, (x[0]*y[1]+x[1]*y[0]+x[1]*y[1])%5]


def est_combinaison_lineaire(x,c,V):
    oncontinue = True
    i = 0
    while i < len(x) and oncontinue:
        s = 0
        for j in range(len(c)):
            s += c[j]*V[j][i]
        oncontinue = (s == x[i])
        i+=1
    return oncontinue


Le dernier exercice était tiré au hasard parmi 3 questions qui demandait de calculer soit la norme 1,
soit la norme 2, soit la norme infinie d'un vecteur V.

Norme 1
def norme(V):
	somme = 0
	for j in L:
		somme = somme + abs(j)
	return somme

Norme 2
def norme(V):
	somme = 0
	for j in V:
		somme = somme + j*j
	return math.sqrt(somme)

Norme infinie
def norme(V):
	maxi = 0
	for j in L:
		if abs(j) > maxi:
		    maxi = abs(j)
	return maxi
