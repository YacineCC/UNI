# Q6
def recherche2(L, S, p):
    result = []
    k = 0
    somme = sum(L[k:k+p+1])
    if somme >= S:
        result.append(k)

    while p + k + 1 < len(L):
        somme -= L[k]
        k += 1
        somme += L[k + p]

        if somme >= S:
            result.append(k)

    return result


def test_recherche2():
    data = (
        ([38, 52, 79, 91, 73, 60, 85, 27, 73, 48, 71, 43, 24, 64, 41, 47, 1, 90, 24,
         18, 29, 97, 30, 30, 51, 72, 78, 69, 0, 9, 31, 5, 76, 84, 64, 1, 17], 515, 7),
        ([33, 16, 18, 36, 41, 96, 62, 31, 3, 59, 69, 91,
         75, 51, 67, 99, 21, 80, 67, 30, 78], 355, 5),
        ([18, 24, 42, 41, 65, 21, 54, 40, 91, 42, 46, 43, 59, 58, 58, 52, 4, 80, 16, 30, 14,
         41, 79, 23, 77, 29, 56, 52, 49, 84, 81, 34, 18, 33, 98, 99, 70, 93, 18], 417, 7),
        ([91, 88, 10, 75, 18, 75, 90, 29, 49, 38, 74, 73, 40, 70, 33,
         9, 9, 54, 66, 34, 35, 13, 63, 64, 11, 0, 21, 1, 19], 593, 5),
        ([10, 62, 87, 78, 34, 48, 34, 19, 56, 50, 16, 21,
         17, 26, 47, 61, 54, 13, 69, 36, 41], 409, 8),
        ([2, 40, 2, 35, 22, 92, 43, 80, 5, 56, 33, 61, 44, 88, 24, 14, 90, 21,
         66, 88, 50, 12, 49, 18, 48, 40, 19, 40, 47, 88, 25, 48, 9, 85], 484, 15),
        ([45, 50, 78, 8, 43, 78, 22, 96, 31, 14, 72, 1,
         99, 62, 82, 68, 87, 72, 82, 37, 21, 35], 342, 5),
        ([95, 37, 18, 22, 29, 41, 83, 55, 48, 96, 87, 89, 35, 11, 97, 58,
         71, 44, 84, 94, 87, 86, 79, 64, 81, 96, 48, 81, 94], 559, 9),
        ([41, 46, 64, 24, 86, 23, 54, 68, 42, 65, 66, 77,
         35, 44, 24, 74, 26, 62, 6, 35, 14, 21], 598, 9),
        ([97, 98, 1, 40, 70, 35, 2, 26, 53, 52, 37, 76, 32, 88, 39, 24, 4, 89, 19, 84,
         72, 83, 85, 38, 39, 44, 52, 41, 57, 64, 32, 10, 65, 16, 64, 98, 91, 93], 539, 8),
    )

    result = (
        [1, 2, 3],
        [9, 10, 11, 12, 13, 14, 15],
        [6, 7, 8, 22, 23, 24, 27, 28, 29, 30, 31],
        [],
        [0, 1, 2],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
        [10, 11, 12, 13, 14, 15],
        [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        [],
        [17],
    )

    for d, r in zip(data, result):
        assert recherche2(*d) == r

# Q7


def som_div_propres(n):
    return sum(div_propres(n))


def div_propres(n):
    if n == 1:
        return set()
    l = {1}
    i = 2
    while i <= n**0.5:
        if n % i == 0:
            l.add(i)
            l.add(n//i)
        i += 1
    return l

print(som_div_propres(83))
print(som_div_propres(46))
print(som_div_propres(36))
print(som_div_propres(1))

def test_div_propres():
    assert div_propres(6) == {1, 2, 3}


def test_som_div_propres():
    assert som_div_propres(36) == 55
    data = ((67),
            (74),
            (78388905),
            (36),
            (1),
            (104237245),
            (55),
            (84),
            (95762242),
            (17),
            )

    result = (1,
              40,
              64950999,
              55.0,
              0,
              42124355,
              17,
              140,
              55768958,
              1,
              )

    for d, r in zip(data, result):
        assert som_div_propres(d) == r


# Q8

def minimum(L):
    m = L[0]
    i = 0
    while i < len(L):
        if L[i] < m:
            m = L[i]
        i += 1
    return m

# Q9


def minimum_posi(L):
    l = []
    m = L[0]
    i = 0
    while i < len(L):
        if L[i] == m:
            l.append(i)
        elif L[i] < m:
            m = L[i]
            l = [i]
        i += 1
    return l


# Q10

def minimum2(L):
    m1, m2 = 0, 0
    if L[0] < L[1]:
        m1 = L[0]
        m2 = L[1]
    else:
        m2 = L[0]
        m1 = L[1]

    i = 2
    while i < len(L):
        if L[i] < m1:
            m2 = m1
            m1 = L[i]
        elif L[i] < m2:
            m2 = L[i]
        i += 1
    return m2


def test_minimum2():
    assert minimum2([16, 0, 5, 15]) == 5
    result = ([16, 0, 5, 15],
              [3, 6, 10, 15, -9],
              [-15, -6, -12],
              [4, 9, -19, 14, 19, -7, -4],
              [7, 10, 14, 18, -9, -3],
              [3, 10, -8, -6, -1],
              [3, 4, -20, 13, -17, -12, -11, -6],
              [2, 5, 6, 10, 12, 13, 14, 15],
              [6, 9, -20, -18, -9],
              [4, 5, 6, 7, 8, -17, 18, -13, -10],
              )

    data = (
        5,
        3,
        -12,
        -7,
        -3,
        -6,
        -17,
        5,
        -18,
        -13,
    )

    for r, d in zip(result, data):
        assert minimum2(r) == d
test_minimum2()